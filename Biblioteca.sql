-- SI LA BASE EXISTE ELIMINELA
DROP DATABASE IF EXISTS BIBLIOTECA;
-- CREAR BASE DE DATOS
CREATE DATABASE BIBLIOTECA;
-- USAR EL ESQUEMA O BASE DE DATOS.
USE BIBLIOTECA;

-- CREACION DE TABLAS
CREATE TABLE AUTORES(ID INT AUTO_INCREMENT PRIMARY KEY, NOMBRE VARCHAR(255) NOT  NULL,NACIONALIDAD VARCHAR(255));
CREATE TABLE LIBROS(ID INT AUTO_INCREMENT PRIMARY KEY, TITULO VARCHAR(255),ANO_PUBLICACION YEAR,STOCK INT, ID_AUTOR INT, CONSTRAINT FK_autor_libro FOREIGN KEY (ID_AUTOR) REFERENCES AUTORES(ID));
CREATE TABLE MIEMBROS(ID INT AUTO_INCREMENT PRIMARY KEY, NOMBRE VARCHAR(200) NOT NULL, FECHA_REGISTRO DATE, DIRECCION VARCHAR(100) );
CREATE TABLE PRESTAMOS(ID INT AUTO_INCREMENT PRIMARY KEY, ID_LIBRO INT, ID_MIEMBRO INT, FECHA_PRESTAMO DATE, FECHA_DEVOLUCION DATE, CONSTRAINT FK_prestamo_libro FOREIGN KEY (ID_LIBRO) REFERENCES LIBROS(ID), CONSTRAINT FK_prestamo_miembro FOREIGN KEY (ID_MIEMBRO) REFERENCES MIEMBROS(ID));

-- Insertar autores
INSERT INTO Autores (nombre, nacionalidad) VALUES 
('Gabriel Garcia Marquez', 'Colombiano'),
('Isabel Allende', 'Chilena'),
('J.K. Rowling', 'Británica');

-- Insertar libros
INSERT INTO Libros (titulo, id_autor, ano_publicacion, stock) VALUES 
('Cien Años de Soledad', 1, 1967, 5),
('La Casa de los Espíritus', 2, 1982, 3),
('Harry Potter y la Piedra Filosofal', 3, 1997, 7);

-- Insertar miembros
INSERT INTO Miembros (nombre, fecha_registro, direccion) VALUES 
('Juan Perez', '2022-01-15', 'Calle Falsa 123'),
('Ana Gomez', '2023-03-22', 'Avenida Siempreviva 742');

-- Insertar préstamos
INSERT INTO Prestamos (id_libro, id_miembro, fecha_prestamo, fecha_devolucion) VALUES 
(1, 1, '2024-01-10', '2024-01-20'),
(2, 2, '2024-02-15', '2024-02-25');




-- VISTA PARA VER TODO LOS LIBROS PRESTADO
DROP VIEW IF EXISTS VISTA_PRESTAMOS_ACTUALES;
CREATE VIEW VISTA_PRESTAMOS_ACTUALES AS
SELECT P.ID, M.NOMBRE,L.TITULO,P.FECHA_PRESTAMO,P.FECHA_DEVOLUCION FROM PRESTAMOS AS P
JOIN LIBROS AS L ON L.ID = P.ID_LIBRO
JOIN MIEMBROS AS M ON P.ID_MIEMBRO = M.ID
;

-- EJECUCION DE LA VISTA 
SELECT * FROM VISTA_PRESTAMOS_ACTUALES;

-- CUANDO SE PRESTE UN LIBRO SE VA A DISPARA EL TRIGGER Y VA RESTAR UNO EN LA TABLA DE LIBROS.
-- CREAR TRIGGER
delimiter  //
CREATE TRIGGER ACTUALIZAR_STOCK_LIRBOS
AFTER INSERT ON PRESTAMOS
FOR EACH ROW
BEGIN 
	UPDATE LIBROS
    SET STOCK = STOCK -1
    WHERE ID = NEW.ID_LIBRO;
END //
delimiter  ;

-- PROCEDUR PARA REGISTRAR PRESTAMOS
DROP PROCEDURE IF EXISTS PRESTAMO;
delimiter //

CREATE PROCEDURE PRESTAMO(
IN id_libro INT ,
IN id_miembro INT,
IN fecha_prestamo DATE,
IN fecha_devolucion DATE
)
BEGIN
	INSERT INTO Prestamos (id_libro, id_miembro, fecha_prestamo, fecha_devolucion) 
			VALUES (id_libro, id_miembro, fecha_prestamo, fecha_devolucion);
	
END //

DELIMITER ;

-- FUNCION PARA CALCULAR EL TOTAL DE LIBROS PRESTADOS
DELIMITER // 
CREATE FUNCTION TOTAL_LIBROS_PRESTADO () RETURNS INT DETERMINISTIC
BEGIN
	DECLARE TOTAL INT;
	SELECT COUNT(*) INTO TOTAL FROM PRESTAMOS;
    RETURN TOTAL;
    
END //
DELIMITER ;

-- SP O PROCEDURE PARA INGRESAR LIBROS A PRESTAMOS
CALL PRESTAMO(1, 1, '2024-01-10', '2024-01-20');

-- FUNCION PARA CONTAR LIBROS PRESTADOS
SELECT TOTAL_LIBROS_PRESTADO();

